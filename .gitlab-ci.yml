include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/Scan/trivy.yml

stages:
  - download
  - build
  - scan

variables:
  ARCHITECTURES: "amd64 arm32v7 arm64v8 i386 ppc64le s390x"

download:
  rules:
    - if: '$ONLY == "CONTAINER_SCAN"'
      when: never
    - when: on_success
  variables:
    URI: https://doi-janky.infosiftr.net/job/tianon/job/debuerreotype/job
    GIT_STRATEGY: none
  stage: download
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  before_script:
    - apk add --no-cache coreutils curl grep xz tar
    - wget https://gist.githubusercontent.com/Johannestegner/093e8053eabd795ed84b83e9610aed6b/raw/helper.sh -O helper
    - chmod +x helper
  script:
    - PATHS="oldstable oldstable/slim stable stable/slim"
    - mkdir -p artifacts/stable/slim
    - mkdir -p artifacts/oldstable/slim
    - VERSIONS="stable oldstable"
    - |
      for v in $VERSIONS; do
        curl -lsS ${URI}/amd64/lastSuccessfulBuild/artifact/${v}/rootfs.debian_version > artifacts/${v}/version.txt
        curl -lsS ${URI}/amd64/lastSuccessfulBuild/artifact/${v}/Release | grep -oP "(?<=Codename:\ )(.*)" | awk '{print $1}' >> artifacts/${v}/version.txt
        cp artifacts/${v}/version.txt artifacts/${v}/slim/version.txt
      done;
    - |
      for p in $PATHS; do
        for ARCH in $ARCHITECTURES; do
          DOCKER_ARCH=$(./helper arch "${ARCH}")
          mkdir -p artifacts/${p}/${DOCKER_ARCH}
          curl -OlsS ${URI}/${ARCH}/lastSuccessfulBuild/artifact/${p}/rootfs.tar.xz
          curl -OlsS ${URI}/${ARCH}/lastSuccessfulBuild/artifact/${p}/rootfs.tar.xz.sha256
          echo "$(cat rootfs.tar.xz.sha256) rootfs.tar.xz" | sha256sum -c -
          rm rootfs.tar.xz.sha256
          mkdir tmp
          tar -xJhf rootfs.tar.xz -C tmp/
          $(cd tmp && tar -czf ${CI_PROJECT_DIR}/rootfs.tar.gz *)
          rm -rf tmp
          mv rootfs.tar.gz artifacts/${p}/${DOCKER_ARCH}/rootfs.tar.gz
        done
      done;
  artifacts:
    expire_in: 1 hour
    paths:
      - artifacts/

.build:
  rules:
    - if: '$ONLY == "CONTAINER_SCAN"'
      when: never
    - when: on_success
  dependencies:
    - download
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  stage: build
  variables:
    DIR_PATH: /
    TAG_SUFFIX: ""
  script:
    - VERSIONS=$(cat artifacts/${DIR_PATH}/version.txt)
    - VERSION=$(echo ${VERSIONS} | awk '{print $1;}')
    - NAME=$(echo ${VERSIONS} | awk '{print $2;}')
    - TAGS="${TAGS},${VERSION}${TAG_SUFFIX},$(echo ${VERSION} | cut -d'.' -f1)${TAG_SUFFIX},${NAME}${TAG_SUFFIX}"
    - ARCH_LIST=$(helper archlist ${ARCHITECTURES})
    - TAG_STRING=$(helper taglist "${CI_REGISTRY_IMAGE},jitesoft/debian" "${TAGS}")
    - docker buildx build --platform ${ARCH_LIST} --push ${TAG_STRING} --progress plain --build-arg VERSION=${VERSION} --build-arg NAME=${NAME} --build-arg ARTIFACT_PATH=${DIR_PATH} .
  tags: [ jitesoft, buildx, protected ]

build:old:
  extends: .build
  variables:
    DIR_PATH: 'oldstable'
    TAGS: ""
    TAG_SUFFIX: ""

build:stable:
  extends: .build
  variables:
    DIR_PATH: 'stable'
    TAGS: "latest,stable"
    TAG_SUFFIX: ""

build:old:slim:
  extends: .build
  variables:
    DIR_PATH: 'oldstable/slim'
    TAGS: ""
    TAG_SUFFIX: "-slim"

build:stable:slim:
  extends: .build
  variables:
    DIR_PATH: 'stable/slim'
    TAGS: "latest-slim,stable-slim"
    TAG_SUFFIX: "-slim"

scan:stable:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:stable"
    GIT_STRATEGY: none

scan:old:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:stretch"
    GIT_STRATEGY: none

scan:stable:slim:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:stable-slim"
    GIT_STRATEGY: none

scan:old:slim:
  extends: .container_scanning
  variables:
    SCANNING_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:stretch-slim"
    GIT_STRATEGY: none
